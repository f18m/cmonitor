#!/usr/bin/python3

#
# cmonitor_statistics.py
#
# Author: Gajanan Khandake
# Created: April 2021
#

import getopt
import json
import os
import sys
import gzip
from statistics import mean, median, mode, StatisticsError


# =======================================================================================================
# CONSTANTS
# =======================================================================================================

VERSION_STRING = "__RPM_VERSION__-__RPM_RELEASE__"

# =======================================================================================================
# GLOBALs
# =======================================================================================================

verbose = False

# =======================================================================================================
# CLASS
# =======================================================================================================
class CmonitorStatistics:
    class Statistics:
        def __init__(self, unit: str) -> None:
            self.__stats = list()
            self.__unit = unit

        def insert_stat(self, value) -> None:
            self.__stats.append(value)

        def __min(self):
            return min(self.__stats)

        def __max(self):
            return max(self.__stats)

        def __mean(self):
            return mean(self.__stats)

        def __median(self):
            return median(self.__stats)

        def __mode(self):
            try:
                return mode(self.__stats)
            except StatisticsError:
                return "no unique mode"

        def dump_json(self) -> dict:
            global verbose
            statistics = dict()

            if len(self.__stats) > 0:
                statistics["minimum"] = self.__min()
                statistics["maximum"] = self.__max()
                statistics["mean"] = self.__mean()
                statistics["median"] = self.__median()
                statistics["mode"] = self.__mode()
                statistics["unit"] = self.__unit
                if verbose:
                    statistics["stats"] = self.__stats
                    statistics["samples"] = len(self.__stats)

            return statistics

    class CgroupTasksStatistics:
        def __init__(self) -> None:
            self.cpu = CmonitorStatistics.Statistics("%")
            self.memory = CmonitorStatistics.Statistics("bytes")
            self.io = CmonitorStatistics.Statistics("bytes")
            self.memory_failcnt = CmonitorStatistics.Statistics("")
            self.cpu_throttle = CmonitorStatistics.Statistics("%")

        def insert_cpu_stats(self, stats: dict, sample_index: int) -> None:
            if "cpu_tot" in stats:
                self.cpu.insert_stat(stats["cpu_tot"]["user"] + stats["cpu_tot"]["sys"])
            else:
                print(f"WARNING: The JSON file provided does not contain the 'cpu_tot' measurement for sample #{sample_index}. Skipping this sample.")

            if "throttling" in stats:
                cpu_throttle_percentage = 0
                if stats["throttling"]["nr_periods"] > 0:
                    cpu_throttle_percentage = (stats["throttling"]["nr_throttled"] * 100) / stats["throttling"]["nr_periods"]
                self.cpu_throttle.insert_stat(cpu_throttle_percentage)
            else:
                print(
                    f"WARNING: The JSON file provided does not contain the 'throttling' measurement for sample #{sample_index}. Skipping this sample."
                )

        def dump_cpu_stats(self) -> None:
            return self.cpu.dump_json()

        def dump_cpu_throttle_stats(self) -> None:
            return self.cpu_throttle.dump_json()

        def insert_memory_stats(self, stats: dict, sample_index: int) -> None:
            if "stat.rss" in stats:
                self.memory.insert_stat(stats["stat.rss"])
            else:
                print(
                    f"WARNING: The JSON file provided does not contain the 'stat.rss' measurement for sample #{sample_index}. Skipping this sample."
                )
            if "failcnt" in stats:
                self.memory_failcnt.insert_stat(stats["failcnt"])
            else:
                print(f"WARNING: The JSON file provided does not contain the 'failcnt' measurement for sample #{sample_index}. Skipping this sample.")

        def dump_memory_stats(self) -> None:
            return self.memory.dump_json()

        def dump_memory_failcnt_stats(self) -> None:
            return self.memory_failcnt.dump_json()

        # cgroup_blkio not yet available
        # def insert_io_stats(self, stats: dict) -> None:
        #    self.io.insert_stat(stats["io_rchar"] + stats["io_wchar"])
        # def dump_io_stats(self) -> None:
        #    return self.io.dump_json()

    def __init__(self) -> None:
        self.cgroup_statistics = self.CgroupTasksStatistics()
        pass

    def load_json_data(self, infile):
        """
        This function is able to read both JSON files produced by cmonitor_collector and
        compressed JSON.GZ files.
        Moreover this function is also tolerant to unfinished JSON files (i.e. files in which
        cmonitor_collector is still appending data).
        Finally it also performs very basic validation of JSON structure.
        Returns the JSON structure of the document.

        This function is shared between cmonitor_chart.py and cmonitor_statistics.py
        """
        # read the raw .json as text
        try:
            if infile[-8:] == ".json.gz":
                print("Loading gzipped JSON file %s" % infile)
                f = gzip.open(infile, "rb")
                text = f.read()
                f.close()

                # in Python 3.5 the gzip returns a sequence of "bytes" and not a "str"
                if isinstance(text, bytes):
                    text = text.decode("utf-8")
            else:
                print("Loading JSON file %s" % infile)
                f = open(infile, "r")
                text = f.read()
                f.close()
        except OSError as err:
            print("Error while opening input JSON file '%s': %s" % (infile, err))
            sys.exit(1)

        # Convert the text to json and extract the stats
        try:
            entry = json.loads(text)  # convert text to JSON
        except json.decoder.JSONDecodeError as e:
            # fix up the end of the file if it is not complete
            if text[-1] == ",":
                # try removing last comma
                text[-1] = " "
            # add the closure of the "samples" array and JSON end-of-object
            entry = json.loads(text + "]}")

        try:
            jheader = entry["header"]
            jdata = entry["samples"]  # removes outer parts so we have a list of snapshot dictionaries
        except:
            print("Unexpected JSON format. Aborting.")
            sys.exit(1)

        # Check if cmonitor_collector version used differs or not:
        try:
            cmonitor_collector_version = jheader["cmonitor"]["version"]
            my_major = VERSION_STRING.split(".")[0]
            cmonitor_collector_major = cmonitor_collector_version.split(".")[0]
            if cmonitor_collector_major != my_major:
                print(
                    f"ERROR: the input JSON file has been generated by cmonitor_collector v{cmonitor_collector_version}, which has a different MAJOR version compared to this tool which is v{VERSION_STRING}."
                )
                sys.exit(10)
            elif cmonitor_collector_version != VERSION_STRING:
                print(
                    f"WARNING: the input JSON file has been generated by cmonitor_collector v{cmonitor_collector_version}, different than the version of this tool which is v{VERSION_STRING}."
                )
        except KeyError:
            pass
        return entry

    def process(self, input_json: str, output_file: str) -> None:
        json_data = self.load_json_data(input_json)
        if "samples" not in json_data:
            print("Unexpected JSON format. Aborting.")
            sys.exit(1)

        first_sample = json_data["samples"][0]
        do_cpu_stats = True
        if "cgroup_cpuacct_stats" not in first_sample:
            do_cpu_stats = False
            print(
                "WARNING: The JSON file provided does not contain measurements for the 'cpuacct' cgroup. Please use '--collect=cgroup_cpu' when launching cmonitor_collector."
            )
        elif "cpu_tot" not in first_sample["cgroup_cpuacct_stats"]:
            do_cpu_stats = False
            print(
                "WARNING: The JSON file provided does not contain the 'cpu_tot' measurement. Probably it was produced by cmonitor version 1.7-0 or earlier. Skipping CPU statistics."
            )

        do_memory_stats = True
        if "cgroup_memory_stats" not in first_sample:
            do_memory_stats = False
            print(
                "WARNING: The JSON file provided does not contain measurements for the 'memory' cgroup. Please use '--collect=cgroup_memory' when launching cmonitor_collector."
            )

        for sample in json_data["samples"]:
            try:
                nsample = sample["timestamp"]["sample_index"]
            except KeyError:
                nsample = -1
            if do_cpu_stats:
                self.cgroup_statistics.insert_cpu_stats(sample["cgroup_cpuacct_stats"], nsample)
            if do_memory_stats:
                self.cgroup_statistics.insert_memory_stats(sample["cgroup_memory_stats"], nsample)

            # self.cgroup_statistics.insert_io_stats(stats)     # cgroup_blkio not yet available

        self.dump_statistics_json(output_file)

    def __dump_json_to_file(
        self,
        statistics: dict,
        outfile: str,
    ) -> None:
        print(f"Opening output file {outfile}")
        with open(outfile, "w") as of:
            json.dump(statistics, of)

    def dump_statistics_json(self, output_file="") -> None:
        statistics = {
            "statistics": {
                "cpu": self.cgroup_statistics.dump_cpu_stats(),
                "cpu_throttle": self.cgroup_statistics.dump_cpu_throttle_stats(),
                "memory": self.cgroup_statistics.dump_memory_stats(),
                "memory_failcnt": self.cgroup_statistics.dump_memory_failcnt_stats(),
                # "io": self.cgroup_statistics.dump_io_stats(),
            }
        }

        if output_file:
            self.__dump_json_to_file(statistics, output_file)
        else:
            print("Result of analysis:")
            print(json.dumps(statistics, indent=4, sort_keys=True))


# =======================================================================================================
# MAIN HELPERS
# =======================================================================================================


def usage():
    """Provides commandline usage"""
    print("cmonitor_statistics version {}".format(VERSION_STRING))
    print("Utility to post-process data recorded by 'cmonitor_collector' and")
    print("extract min/max/mean/median/mode for CPU/MEMORY/IO measurements.")
    print("Typical usage:")
    print("  %s --input=output_from_cmonitor_collector.json [--output=myreport.json]" % sys.argv[0])
    print("Required parameters:")
    print("  -i, --input=<file.json>    The JSON file to analyze.")
    print("Main options:")
    print("  -h, --help                 (this help)")
    print("  -v, --verbose              Be verbose.")
    print("      --version              Print version and exit.")
    print("  -o, --output=<file.json>   The name of the output JSON file with statistics.")
    sys.exit(0)


def parse_command_line():
    """Parses the command line and returns the configuration as dictionary object."""
    try:
        opts, remaining_args = getopt.getopt(sys.argv[1:], "hvv", ["help", "verbose", "version", "output=", "input="])
    except getopt.GetoptError as err:
        # print help information and exit:
        print(str(err))  # will print something like "option -a not recognized"
        usage()  # will exit program

    global verbose
    input_json = ""
    output_file = ""
    for o, a in opts:
        if o in ("-i", "--input"):
            input_json = a
        elif o in ("-o", "--output"):
            output_file = a
        elif o in ("-h", "--help"):
            usage()
        elif o in ("-v", "--verbose"):
            verbose = True
        elif o in ("--version"):
            print("{}".format(VERSION_STRING))
            sys.exit(0)
        else:
            assert False, "unhandled option " + o + a

    if input_json == "":
        print("Please provide --input option (it is a required option)")
        sys.exit(os.EX_USAGE)

    abs_input_json = input_json
    if not os.path.isabs(input_json):
        abs_input_json = os.path.join(os.getcwd(), input_json)

    abs_ouput_file = output_file
    if abs_ouput_file and not os.path.isabs(output_file):
        abs_ouput_file = os.path.join(os.getcwd(), output_file)

    return {"input_json": abs_input_json, "output_file": abs_ouput_file}


# =======================================================================================================
# MAIN
# =======================================================================================================

if __name__ == "__main__":
    config = parse_command_line()
    CmonitorStatistics().process(config["input_json"], config["output_file"])
